Arduino RF Communication Using ASK - Transmitter & Receiver Tutorial
Introduction
In this tutorial, we will learn how to set up Radio Frequency (RF) communication between two Arduino boards using Amplitude Shift Keying (ASK) and the RadioHead library. This project enables wireless data transmission, allowing one Arduino to send numerical messages while another Arduino receives them and determines if the number is even or odd.

By following this tutorial, visitors will learn:

How to wire and configure an RF transmitter and receiver with an Arduino.
How to send and receive data wirelessly using the ASK (Amplitude Shift Keying) modulation.
How to process received data to extract numbers and determine whether they are even or odd.
Application in Autonomous Rover Missions
RF communication is useful in autonomous rover missions for:

Remote commands: The rover can receive instructions such as distances to travel or navigation waypoints.
Sensor data transmission: The rover can transmit sensor readings back to a base station.
Wireless coordination: Multiple rovers can communicate with each other to avoid obstacles or coordinate movements.
In our case, the transmitter sends a 12-character formatted message (e.g., "X13ZZZZZZZZZ"), which the receiver processes to determine whether the number is even or odd.

Required Hardware
To complete this tutorial, you will need:

2 Arduino boards (e.g., Arduino Uno)
1 RF 433MHz Transmitter Module
1 RF 433MHz Receiver Module
Jumper wires
A breadboard (optional, for easy wiring)
Required Libraries
We will use the RadioHead ASK Library for RF communication. Download and install it from the following link:

ðŸ”— RadioHead Library on GitHub

To install the library:

Open Arduino IDE.
Go to Sketch > Include Library > Manage Libraries.
Search for RadioHead and click Install.
Wiring Diagram
Below is the wiring setup for the transmitter and receiver.

ðŸ”¹ Transmitter Wiring (Arduino â†’ RF Transmitter)
RF Transmitter Pin	Arduino Pin
VCC	5V
GND	GND
DATA	Pin 12
ðŸ”¹ Receiver Wiring (RF Receiver â†’ Arduino)
RF Receiver Pin	Arduino Pin
VCC	5V
GND	GND
DATA	Pin 11

Transmitter Code (Sends Formatted Message)
This transmitter Arduino takes a user-inputted number (0-99) and transmits it in the format "X<num>ZZZZZZZZZ".
// Include RadioHead ASK Library
#include <RH_ASK.h>
// Include dependent SPI Library 
#include <SPI.h> 

// Create ASK object
RH_ASK rf_driver;

void setup()
{
    Serial.begin(9600);
    if (!rf_driver.init()) {
        Serial.println("RF Module Initialization Failed!");
    } else {
        Serial.println("RF Module Initialized.");
    }
}

void loop()
{
    Serial.println("Enter a number (0-99) to send:");
    
    // Wait for user input
    while (Serial.available() == 0);

    // Read input number
    int num = Serial.parseInt();
    
    // Clear any remaining characters in the serial buffer
    while (Serial.available()) {
        Serial.read();  // Flush out unwanted characters (like '\n')
    }

    // Validate input
    if (num < 0 || num > 99) {
        Serial.println("Invalid input. Enter a number between 0-99.");
        return;
    }

    // Format the message correctly: "X<num>ZZZZZZZZZ"
    char message[13];  // 12 characters + null terminator
    snprintf(message, sizeof(message), "X%02dZZZZZZZZZ", num);  // Ensures two-digit format

    // Send the formatted message
    Serial.print("Sending: ");
    Serial.println(message);
    
    rf_driver.send((uint8_t *)message, strlen(message));
    rf_driver.waitPacketSent();
    
    delay(1000); // Wait before allowing new input
}

=====================================================================================
Receiver Code (Receives Message & Determines Even/Odd)
The receiver Arduino listens for incoming messages, extracts the numerical value, and determines if it is even or odd.
// Include RadioHead Amplitude Shift Keying Library
#include <RH_ASK.h>
// Include dependent SPI Library 
#include <SPI.h> 

// Create ASK object
RH_ASK rf_driver;

void setup()
{
    // Initialize Serial Monitor
    Serial.begin(9600);

    // Initialize ASK Object
    if (!rf_driver.init()) {
        Serial.println("RF Module Initialization Failed!");
    } else {
        Serial.println("RF Module Initialized.");
        Serial.println("Waiting for messages...");
    }
}

void loop()
{
    // Set buffer size for expected message
    uint8_t buf[13] = {0};  // 12 chars + null terminator
    uint8_t buflen = sizeof(buf);

    // Check if a valid message is received
    if (rf_driver.recv(buf, &buflen)) 
    {
        // Ensure the received buffer is null-terminated (prevents random characters)
        if (buflen < sizeof(buf)) {
            buf[buflen] = '\0';  
        } else {
            buf[sizeof(buf) - 1] = '\0';  
        }

        // Extract the number from the received message
        if (buf[0] == 'X') {  // Ensure correct format
            int receivedNum = atoi((char*)&buf[1]);  // Convert from string to integer (ignoring 'X')

            // Print received message
            Serial.print("Message Received: ");
            Serial.println((char*)buf);  

            // Determine if the number is even or odd
            Serial.print(receivedNum);
            if (receivedNum % 2 == 0) {
                Serial.println(" is even.");
            } else {
                Serial.println(" is odd.");
            }
        } else {
            Serial.println("Invalid message format received.");
        }
    }
}

Example Output

Transmitter:
Enter a number (0-99) to send:
Sending: X13ZZZZZZZZZ

Receiver:
Message Received: X13ZZZZZZZZZ
13 is odd.

References
RadioHead Library Documentation: https://www.airspayce.com/mikem/arduino/RadioHead/
Arduino Official Website: https://www.arduino.cc/
Fritzing for Wiring Diagrams: http://fritzing.org/home/

Conclusion
By following this tutorial, you have successfully implemented wireless communication between two Arduinos using RF 433MHz modules. This knowledge is useful for:

Remote control applications
Wireless sensor data transmission
Autonomous rover navigation commands
ðŸŽ¯ Now, experiment by modifying the transmitted message and using RF signals for real-world automation projects! ðŸš€
